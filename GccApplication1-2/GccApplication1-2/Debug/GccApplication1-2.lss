
GccApplication1-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000666  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000666  000006fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  00800062  00800062  000006fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000650  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000554  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000389  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000352  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000269  00000000  00000000  00001b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001db3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	45 c0       	rjmp	.+138    	; 0x98 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	8f c0       	rjmp	.+286    	; 0x13c <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e6       	ldi	r30, 0x66	; 102
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 32       	cpi	r26, 0x2E	; 46
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1a d0       	rcall	.+52     	; 0x8e <main>
  5a:	03 c3       	rjmp	.+1542   	; 0x662 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PORTS>:
double db;
int value = 1;

void PORTS()
{
	DDRB = 0xFF;
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  62:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x00;
  64:	14 ba       	out	0x14, r1	; 20
  66:	08 95       	ret

00000068 <ADC_set>:
}
void ADC_set()
{
	//Регистр выбора мультиплексора
	ADMUX = (0 << REFS1) | (1 << REFS0) | (1 << ADLAR); //внутренний источник опорного напряжение - напряжение питания
  68:	80 e6       	ldi	r24, 0x60	; 96
  6a:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (0 << MUX3) | (0 << MUX2) | (0 << MUX1) | (1 << MUX0); //ацп на ADC1
  6c:	38 9a       	sbi	0x07, 0	; 7
	//ADC Status and Control Registor A - ADCSRA
	//ставим 1 в 7 бит на разрешение работы АЦП
	//ставим 1 в 5 бит на постоянную обработку сигнала
	ADCSRA = (1 << ADEN) | (1 << ADSC)| (1 << ADFR) | (1 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  6e:	8b ee       	ldi	r24, 0xEB	; 235
  70:	86 b9       	out	0x06, r24	; 6
  72:	08 95       	ret

00000074 <Timer_counter_set>:
}
void Timer_counter_set()
{
	//регистр управления таймера 1
	TCCR1B = (1 << WGM12) | (1 << CS12) | (0 << CS11) | (1 << CS10); //сбрасываем счетчик таймера, устанавливаем режим CTC, делитель частоты равен 256
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x007F; //127
  78:	8f e7       	ldi	r24, 0x7F	; 127
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	9b bd       	out	0x2b, r25	; 43
  7e:	8a bd       	out	0x2a, r24	; 42
	OCR1A = 7812,5;
  80:	84 e8       	ldi	r24, 0x84	; 132
  82:	9e e1       	ldi	r25, 0x1E	; 30
  84:	9b bd       	out	0x2b, r25	; 43
  86:	8a bd       	out	0x2a, r24	; 42
	//OCR1A = 512;
	//запись значения в регистр сравнения
	//(делитель 1МГц/128 = 7812.5; 7812.5/128 = 61.035; 61.035 * 2 = 122.07, т.е приблизительно соответствует 122 значение АЦП)
	//OCR1A = 62499; //ставим точку сравнения, чтобы срабатывало прерывание каждую секунду (для настройки точки сравнения используем формулу из примера выше)
	TIMSK = (1<<OCIE1A); //активируем прерывание по совпадению с OCR1A
  88:	80 e1       	ldi	r24, 0x10	; 16
  8a:	89 bf       	out	0x39, r24	; 57
  8c:	08 95       	ret

0000008e <main>:
}

int main(void)
{
	PORTS();
  8e:	e7 df       	rcall	.-50     	; 0x5e <PORTS>
	ADC_set();
  90:	eb df       	rcall	.-42     	; 0x68 <ADC_set>
	Timer_counter_set();
  92:	f0 df       	rcall	.-32     	; 0x74 <Timer_counter_set>
	//DB();
	//arr_adc_processing()
	sei(); //установка флага глобального прерывания
  94:	78 94       	sei
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x8>

00000098 <__vector_6>:
	{
		
	}
}
ISR(TIMER1_COMPA_vect) //обработчик прерывания от таймера 1
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	4f 93       	push	r20
  a8:	5f 93       	push	r21
  aa:	6f 93       	push	r22
  ac:	7f 93       	push	r23
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	af 93       	push	r26
  b4:	bf 93       	push	r27
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
	int max_value = arr_adc[0];
  ba:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <arr_adc>
  be:	30 e0       	ldi	r19, 0x00	; 0
	int min_value = arr_adc[0];
	
	for (int i = 0; i < arr_adc[200]; i++)
  c0:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <__bss_end>
  c4:	66 23       	and	r22, r22
  c6:	d1 f0       	breq	.+52     	; 0xfc <__vector_6+0x64>
  c8:	e6 e6       	ldi	r30, 0x66	; 102
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	6a 59       	subi	r22, 0x9A	; 154
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	a9 01       	movw	r20, r18
  d4:	df 01       	movw	r26, r30
	{
		if (max_value < arr_adc[i])
  d6:	80 81       	ld	r24, Z
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	28 17       	cp	r18, r24
  dc:	39 07       	cpc	r19, r25
  de:	2c f0       	brlt	.+10     	; 0xea <__vector_6+0x52>
  e0:	84 17       	cp	r24, r20
  e2:	95 07       	cpc	r25, r21
  e4:	1c f4       	brge	.+6      	; 0xec <__vector_6+0x54>
  e6:	ac 01       	movw	r20, r24
  e8:	01 c0       	rjmp	.+2      	; 0xec <__vector_6+0x54>
		{
			max_value = arr_adc[i]; //наиб точка из 200
  ea:	9c 01       	movw	r18, r24
		{
			min_value = arr_adc[i]; //наим. точка из 200
		}
		//после нахождения наибольшего и наименьшего элементов нашего массива, вычислим амплитуду
		int diff_bet_max_min = max_value - min_value;
		arr_adc[i] = diff_bet_max_min;
  ec:	c9 01       	movw	r24, r18
  ee:	84 1b       	sub	r24, r20
  f0:	95 0b       	sbc	r25, r21
  f2:	8c 93       	st	X, r24
  f4:	31 96       	adiw	r30, 0x01	; 1
ISR(TIMER1_COMPA_vect) //обработчик прерывания от таймера 1
{
	int max_value = arr_adc[0];
	int min_value = arr_adc[0];
	
	for (int i = 0; i < arr_adc[200]; i++)
  f6:	e6 17       	cp	r30, r22
  f8:	f7 07       	cpc	r31, r23
  fa:	61 f7       	brne	.-40     	; 0xd4 <__vector_6+0x3c>
		}
		//после нахождения наибольшего и наименьшего элементов нашего массива, вычислим амплитуду
		int diff_bet_max_min = max_value - min_value;
		arr_adc[i] = diff_bet_max_min;
	}
	ADCSRA |= (1 << ADSC); //начинаем единичное преобразование АЦП
  fc:	36 9a       	sbi	0x06, 6	; 6
	arr_adc[value] = ADCH; //запись значения АЦП в массив arr_adc
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 102:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 106:	25 b1       	in	r18, 0x05	; 5
 108:	fc 01       	movw	r30, r24
 10a:	ea 59       	subi	r30, 0x9A	; 154
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	20 83       	st	Z, r18
	value++; //увеличение счетчика
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_14>:
ISR(ADC_vect)//обработчик прерываний
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	db = ((ADCH + 58.2009) /2.63); //первая попытка проведения измерений спикера для регрессионного аналаизи
 166:	65 b1       	in	r22, 0x05	; 5
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	c5 d1       	rcall	.+906    	; 0x4fa <__floatsisf>
 170:	29 eb       	ldi	r18, 0xB9	; 185
 172:	3d ec       	ldi	r19, 0xCD	; 205
 174:	48 e6       	ldi	r20, 0x68	; 104
 176:	52 e4       	ldi	r21, 0x42	; 66
 178:	ee d0       	rcall	.+476    	; 0x356 <__addsf3>
 17a:	2c ee       	ldi	r18, 0xEC	; 236
 17c:	31 e5       	ldi	r19, 0x51	; 81
 17e:	48 e2       	ldi	r20, 0x28	; 40
 180:	50 e4       	ldi	r21, 0x40	; 64
 182:	51 d1       	rcall	.+674    	; 0x426 <__divsf3>
 184:	6b 01       	movw	r12, r22
 186:	7c 01       	movw	r14, r24
 188:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
 18c:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
 190:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end+0x2>
 194:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x3>
	if (db > 0 && db < 15) // если уровень звука от 0 до 15 дБа
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	a9 01       	movw	r20, r18
 19e:	5d d2       	rcall	.+1210   	; 0x65a <__gesf2>
 1a0:	18 16       	cp	r1, r24
 1a2:	64 f4       	brge	.+24     	; 0x1bc <__vector_14+0x80>
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e7       	ldi	r20, 0x70	; 112
 1aa:	51 e4       	ldi	r21, 0x41	; 65
 1ac:	c7 01       	movw	r24, r14
 1ae:	b6 01       	movw	r22, r12
 1b0:	36 d1       	rcall	.+620    	; 0x41e <__cmpsf2>
 1b2:	88 23       	and	r24, r24
 1b4:	1c f4       	brge	.+6      	; 0x1bc <__vector_14+0x80>
	{
		PORTB = (1 << 0); // загорается первый светодиод
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	b7 c0       	rjmp	.+366    	; 0x32a <__vector_14+0x1ee>
	}
	else if (db >= 15 && db < 30) // если уровень звука от 15 до 30 дБа
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e7       	ldi	r20, 0x70	; 112
 1c2:	51 e4       	ldi	r21, 0x41	; 65
 1c4:	c7 01       	movw	r24, r14
 1c6:	b6 01       	movw	r22, r12
 1c8:	48 d2       	rcall	.+1168   	; 0x65a <__gesf2>
 1ca:	88 23       	and	r24, r24
 1cc:	64 f0       	brlt	.+24     	; 0x1e6 <__vector_14+0xaa>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 ef       	ldi	r20, 0xF0	; 240
 1d4:	51 e4       	ldi	r21, 0x41	; 65
 1d6:	c7 01       	movw	r24, r14
 1d8:	b6 01       	movw	r22, r12
 1da:	21 d1       	rcall	.+578    	; 0x41e <__cmpsf2>
 1dc:	88 23       	and	r24, r24
 1de:	1c f4       	brge	.+6      	; 0x1e6 <__vector_14+0xaa>
	{
		PORTB = (1 << 0) | (1 << 1); // загораются первый и второй светодиоды
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	a2 c0       	rjmp	.+324    	; 0x32a <__vector_14+0x1ee>
	}
	else if(db >= 30 && db < 45) // если уровень звука от 30 до 45 дБа
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	40 ef       	ldi	r20, 0xF0	; 240
 1ec:	51 e4       	ldi	r21, 0x41	; 65
 1ee:	c7 01       	movw	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	33 d2       	rcall	.+1126   	; 0x65a <__gesf2>
 1f4:	88 23       	and	r24, r24
 1f6:	64 f0       	brlt	.+24     	; 0x210 <__vector_14+0xd4>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	44 e3       	ldi	r20, 0x34	; 52
 1fe:	52 e4       	ldi	r21, 0x42	; 66
 200:	c7 01       	movw	r24, r14
 202:	b6 01       	movw	r22, r12
 204:	0c d1       	rcall	.+536    	; 0x41e <__cmpsf2>
 206:	88 23       	and	r24, r24
 208:	1c f4       	brge	.+6      	; 0x210 <__vector_14+0xd4>
	{
		PORTB = (1 << 0) | (1 << 1) | (1 << 2); // загораются первый, второй и третий светодиоды
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	88 bb       	out	0x18, r24	; 24
 20e:	8d c0       	rjmp	.+282    	; 0x32a <__vector_14+0x1ee>
	}
	else if (db >= 45 && db < 60) // если уровень звука от 45 до 60 дБа
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	44 e3       	ldi	r20, 0x34	; 52
 216:	52 e4       	ldi	r21, 0x42	; 66
 218:	c7 01       	movw	r24, r14
 21a:	b6 01       	movw	r22, r12
 21c:	1e d2       	rcall	.+1084   	; 0x65a <__gesf2>
 21e:	88 23       	and	r24, r24
 220:	64 f0       	brlt	.+24     	; 0x23a <__vector_14+0xfe>
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	40 e7       	ldi	r20, 0x70	; 112
 228:	52 e4       	ldi	r21, 0x42	; 66
 22a:	c7 01       	movw	r24, r14
 22c:	b6 01       	movw	r22, r12
 22e:	f7 d0       	rcall	.+494    	; 0x41e <__cmpsf2>
 230:	88 23       	and	r24, r24
 232:	1c f4       	brge	.+6      	; 0x23a <__vector_14+0xfe>
	{
		PORTB = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3); // загораются первый, второй, третий и четвертый светодиоды
 234:	8f e0       	ldi	r24, 0x0F	; 15
 236:	88 bb       	out	0x18, r24	; 24
 238:	78 c0       	rjmp	.+240    	; 0x32a <__vector_14+0x1ee>
	}
	else if (db >= 60 && db < 75) // если уровень звука от 60 до 75 дБа
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	40 e7       	ldi	r20, 0x70	; 112
 240:	52 e4       	ldi	r21, 0x42	; 66
 242:	c7 01       	movw	r24, r14
 244:	b6 01       	movw	r22, r12
 246:	09 d2       	rcall	.+1042   	; 0x65a <__gesf2>
 248:	88 23       	and	r24, r24
 24a:	64 f0       	brlt	.+24     	; 0x264 <__vector_14+0x128>
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	46 e9       	ldi	r20, 0x96	; 150
 252:	52 e4       	ldi	r21, 0x42	; 66
 254:	c7 01       	movw	r24, r14
 256:	b6 01       	movw	r22, r12
 258:	e2 d0       	rcall	.+452    	; 0x41e <__cmpsf2>
 25a:	88 23       	and	r24, r24
 25c:	1c f4       	brge	.+6      	; 0x264 <__vector_14+0x128>
	{
		PORTB = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4); // загораются первый, второй, третий, четвертый и пятый светодиоды
 25e:	8f e1       	ldi	r24, 0x1F	; 31
 260:	88 bb       	out	0x18, r24	; 24
 262:	63 c0       	rjmp	.+198    	; 0x32a <__vector_14+0x1ee>
	}
	else if (db >= 75 && db < 90) // если уровень звука от 75 до 90 дБа
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	46 e9       	ldi	r20, 0x96	; 150
 26a:	52 e4       	ldi	r21, 0x42	; 66
 26c:	c7 01       	movw	r24, r14
 26e:	b6 01       	movw	r22, r12
 270:	f4 d1       	rcall	.+1000   	; 0x65a <__gesf2>
 272:	88 23       	and	r24, r24
 274:	64 f0       	brlt	.+24     	; 0x28e <__vector_14+0x152>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	44 eb       	ldi	r20, 0xB4	; 180
 27c:	52 e4       	ldi	r21, 0x42	; 66
 27e:	c7 01       	movw	r24, r14
 280:	b6 01       	movw	r22, r12
 282:	cd d0       	rcall	.+410    	; 0x41e <__cmpsf2>
 284:	88 23       	and	r24, r24
 286:	1c f4       	brge	.+6      	; 0x28e <__vector_14+0x152>
	{
		PORTB = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5); // загораются первый, второй, третий, четвертый, пятый и шестой светодиоды
 288:	8f e3       	ldi	r24, 0x3F	; 63
 28a:	88 bb       	out	0x18, r24	; 24
 28c:	4e c0       	rjmp	.+156    	; 0x32a <__vector_14+0x1ee>
	}
	else if (db >= 90 && db < 105) // если уровень звука от 90 до 105 дБа
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	44 eb       	ldi	r20, 0xB4	; 180
 294:	52 e4       	ldi	r21, 0x42	; 66
 296:	c7 01       	movw	r24, r14
 298:	b6 01       	movw	r22, r12
 29a:	df d1       	rcall	.+958    	; 0x65a <__gesf2>
 29c:	88 23       	and	r24, r24
 29e:	64 f0       	brlt	.+24     	; 0x2b8 <__vector_14+0x17c>
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	42 ed       	ldi	r20, 0xD2	; 210
 2a6:	52 e4       	ldi	r21, 0x42	; 66
 2a8:	c7 01       	movw	r24, r14
 2aa:	b6 01       	movw	r22, r12
 2ac:	b8 d0       	rcall	.+368    	; 0x41e <__cmpsf2>
 2ae:	88 23       	and	r24, r24
 2b0:	1c f4       	brge	.+6      	; 0x2b8 <__vector_14+0x17c>
	{
		PORTB = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5) | (1 << 6); // загораются первый, второй, третий, четвертый, пятый, шестой и седьмой светодиоды
 2b2:	8f e7       	ldi	r24, 0x7F	; 127
 2b4:	88 bb       	out	0x18, r24	; 24
 2b6:	39 c0       	rjmp	.+114    	; 0x32a <__vector_14+0x1ee>
	}
	else if (db >= 105  && db < 120) // если уровень звука от 105 до 120 дБа
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	42 ed       	ldi	r20, 0xD2	; 210
 2be:	52 e4       	ldi	r21, 0x42	; 66
 2c0:	c7 01       	movw	r24, r14
 2c2:	b6 01       	movw	r22, r12
 2c4:	ca d1       	rcall	.+916    	; 0x65a <__gesf2>
 2c6:	88 23       	and	r24, r24
 2c8:	64 f0       	brlt	.+24     	; 0x2e2 <__vector_14+0x1a6>
 2ca:	20 e0       	ldi	r18, 0x00	; 0
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	40 ef       	ldi	r20, 0xF0	; 240
 2d0:	52 e4       	ldi	r21, 0x42	; 66
 2d2:	c7 01       	movw	r24, r14
 2d4:	b6 01       	movw	r22, r12
 2d6:	a3 d0       	rcall	.+326    	; 0x41e <__cmpsf2>
 2d8:	88 23       	and	r24, r24
 2da:	1c f4       	brge	.+6      	; 0x2e2 <__vector_14+0x1a6>
	{
		//PORTB = (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5)| (1 << 6)| (1 << 7) | (1 << 8); // загораются все светодиоды
		PORTB = 0xFF;
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	88 bb       	out	0x18, r24	; 24
 2e0:	24 c0       	rjmp	.+72     	; 0x32a <__vector_14+0x1ee>
	}
	else if (db >= 120  && db < 135) // если уровень звука от 120 до 135 дБа
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	40 ef       	ldi	r20, 0xF0	; 240
 2e8:	52 e4       	ldi	r21, 0x42	; 66
 2ea:	c7 01       	movw	r24, r14
 2ec:	b6 01       	movw	r22, r12
 2ee:	b5 d1       	rcall	.+874    	; 0x65a <__gesf2>
 2f0:	88 23       	and	r24, r24
 2f2:	74 f0       	brlt	.+28     	; 0x310 <__vector_14+0x1d4>
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	47 e0       	ldi	r20, 0x07	; 7
 2fa:	53 e4       	ldi	r21, 0x43	; 67
 2fc:	c7 01       	movw	r24, r14
 2fe:	b6 01       	movw	r22, r12
 300:	8e d0       	rcall	.+284    	; 0x41e <__cmpsf2>
 302:	88 23       	and	r24, r24
 304:	2c f4       	brge	.+10     	; 0x310 <__vector_14+0x1d4>
	{
		//PORTB = (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5)| (1 << 6)| (1 << 7) | (1 << 8); // загораются все светодиоды
		PORTB = 0xFF;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	88 bb       	out	0x18, r24	; 24
		PORTB = (1 << 5);
 30a:	80 e2       	ldi	r24, 0x20	; 32
 30c:	88 bb       	out	0x18, r24	; 24
 30e:	0d c0       	rjmp	.+26     	; 0x32a <__vector_14+0x1ee>
	}
	else if (db >= 135) // если уровень звука от 135 дБа
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	47 e0       	ldi	r20, 0x07	; 7
 316:	53 e4       	ldi	r21, 0x43	; 67
 318:	c7 01       	movw	r24, r14
 31a:	b6 01       	movw	r22, r12
 31c:	9e d1       	rcall	.+828    	; 0x65a <__gesf2>
 31e:	88 23       	and	r24, r24
 320:	24 f0       	brlt	.+8      	; 0x32a <__vector_14+0x1ee>
	{
		//PORTB = (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5)| (1 << 6)| (1 << 7) | (1 << 8); // загораются все светодиоды
		PORTB = 0xFF;
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	88 bb       	out	0x18, r24	; 24
		PORTB = (1 << 5) | (1 << 4);
 326:	80 e3       	ldi	r24, 0x30	; 48
 328:	88 bb       	out	0x18, r24	; 24
	}	
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__subsf3>:
 354:	50 58       	subi	r21, 0x80	; 128

00000356 <__addsf3>:
 356:	bb 27       	eor	r27, r27
 358:	aa 27       	eor	r26, r26
 35a:	0e d0       	rcall	.+28     	; 0x378 <__addsf3x>
 35c:	44 c1       	rjmp	.+648    	; 0x5e6 <__fp_round>
 35e:	35 d1       	rcall	.+618    	; 0x5ca <__fp_pscA>
 360:	30 f0       	brcs	.+12     	; 0x36e <__addsf3+0x18>
 362:	3a d1       	rcall	.+628    	; 0x5d8 <__fp_pscB>
 364:	20 f0       	brcs	.+8      	; 0x36e <__addsf3+0x18>
 366:	31 f4       	brne	.+12     	; 0x374 <__addsf3+0x1e>
 368:	9f 3f       	cpi	r25, 0xFF	; 255
 36a:	11 f4       	brne	.+4      	; 0x370 <__addsf3+0x1a>
 36c:	1e f4       	brtc	.+6      	; 0x374 <__addsf3+0x1e>
 36e:	2a c1       	rjmp	.+596    	; 0x5c4 <__fp_nan>
 370:	0e f4       	brtc	.+2      	; 0x374 <__addsf3+0x1e>
 372:	e0 95       	com	r30
 374:	e7 fb       	bst	r30, 7
 376:	20 c1       	rjmp	.+576    	; 0x5b8 <__fp_inf>

00000378 <__addsf3x>:
 378:	e9 2f       	mov	r30, r25
 37a:	46 d1       	rcall	.+652    	; 0x608 <__fp_split3>
 37c:	80 f3       	brcs	.-32     	; 0x35e <__addsf3+0x8>
 37e:	ba 17       	cp	r27, r26
 380:	62 07       	cpc	r22, r18
 382:	73 07       	cpc	r23, r19
 384:	84 07       	cpc	r24, r20
 386:	95 07       	cpc	r25, r21
 388:	18 f0       	brcs	.+6      	; 0x390 <__addsf3x+0x18>
 38a:	71 f4       	brne	.+28     	; 0x3a8 <__addsf3x+0x30>
 38c:	9e f5       	brtc	.+102    	; 0x3f4 <__addsf3x+0x7c>
 38e:	5e c1       	rjmp	.+700    	; 0x64c <__fp_zero>
 390:	0e f4       	brtc	.+2      	; 0x394 <__addsf3x+0x1c>
 392:	e0 95       	com	r30
 394:	0b 2e       	mov	r0, r27
 396:	ba 2f       	mov	r27, r26
 398:	a0 2d       	mov	r26, r0
 39a:	0b 01       	movw	r0, r22
 39c:	b9 01       	movw	r22, r18
 39e:	90 01       	movw	r18, r0
 3a0:	0c 01       	movw	r0, r24
 3a2:	ca 01       	movw	r24, r20
 3a4:	a0 01       	movw	r20, r0
 3a6:	11 24       	eor	r1, r1
 3a8:	ff 27       	eor	r31, r31
 3aa:	59 1b       	sub	r21, r25
 3ac:	99 f0       	breq	.+38     	; 0x3d4 <__addsf3x+0x5c>
 3ae:	59 3f       	cpi	r21, 0xF9	; 249
 3b0:	50 f4       	brcc	.+20     	; 0x3c6 <__addsf3x+0x4e>
 3b2:	50 3e       	cpi	r21, 0xE0	; 224
 3b4:	68 f1       	brcs	.+90     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3b6:	1a 16       	cp	r1, r26
 3b8:	f0 40       	sbci	r31, 0x00	; 0
 3ba:	a2 2f       	mov	r26, r18
 3bc:	23 2f       	mov	r18, r19
 3be:	34 2f       	mov	r19, r20
 3c0:	44 27       	eor	r20, r20
 3c2:	58 5f       	subi	r21, 0xF8	; 248
 3c4:	f3 cf       	rjmp	.-26     	; 0x3ac <__addsf3x+0x34>
 3c6:	46 95       	lsr	r20
 3c8:	37 95       	ror	r19
 3ca:	27 95       	ror	r18
 3cc:	a7 95       	ror	r26
 3ce:	f0 40       	sbci	r31, 0x00	; 0
 3d0:	53 95       	inc	r21
 3d2:	c9 f7       	brne	.-14     	; 0x3c6 <__addsf3x+0x4e>
 3d4:	7e f4       	brtc	.+30     	; 0x3f4 <__addsf3x+0x7c>
 3d6:	1f 16       	cp	r1, r31
 3d8:	ba 0b       	sbc	r27, r26
 3da:	62 0b       	sbc	r22, r18
 3dc:	73 0b       	sbc	r23, r19
 3de:	84 0b       	sbc	r24, r20
 3e0:	ba f0       	brmi	.+46     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e2:	91 50       	subi	r25, 0x01	; 1
 3e4:	a1 f0       	breq	.+40     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3e6:	ff 0f       	add	r31, r31
 3e8:	bb 1f       	adc	r27, r27
 3ea:	66 1f       	adc	r22, r22
 3ec:	77 1f       	adc	r23, r23
 3ee:	88 1f       	adc	r24, r24
 3f0:	c2 f7       	brpl	.-16     	; 0x3e2 <__addsf3x+0x6a>
 3f2:	0e c0       	rjmp	.+28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f4:	ba 0f       	add	r27, r26
 3f6:	62 1f       	adc	r22, r18
 3f8:	73 1f       	adc	r23, r19
 3fa:	84 1f       	adc	r24, r20
 3fc:	48 f4       	brcc	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fe:	87 95       	ror	r24
 400:	77 95       	ror	r23
 402:	67 95       	ror	r22
 404:	b7 95       	ror	r27
 406:	f7 95       	ror	r31
 408:	9e 3f       	cpi	r25, 0xFE	; 254
 40a:	08 f0       	brcs	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	b3 cf       	rjmp	.-154    	; 0x374 <__addsf3+0x1e>
 40e:	93 95       	inc	r25
 410:	88 0f       	add	r24, r24
 412:	08 f0       	brcs	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	99 27       	eor	r25, r25
 416:	ee 0f       	add	r30, r30
 418:	97 95       	ror	r25
 41a:	87 95       	ror	r24
 41c:	08 95       	ret

0000041e <__cmpsf2>:
 41e:	a8 d0       	rcall	.+336    	; 0x570 <__fp_cmp>
 420:	08 f4       	brcc	.+2      	; 0x424 <__cmpsf2+0x6>
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	08 95       	ret

00000426 <__divsf3>:
 426:	0c d0       	rcall	.+24     	; 0x440 <__divsf3x>
 428:	de c0       	rjmp	.+444    	; 0x5e6 <__fp_round>
 42a:	d6 d0       	rcall	.+428    	; 0x5d8 <__fp_pscB>
 42c:	40 f0       	brcs	.+16     	; 0x43e <__divsf3+0x18>
 42e:	cd d0       	rcall	.+410    	; 0x5ca <__fp_pscA>
 430:	30 f0       	brcs	.+12     	; 0x43e <__divsf3+0x18>
 432:	21 f4       	brne	.+8      	; 0x43c <__divsf3+0x16>
 434:	5f 3f       	cpi	r21, 0xFF	; 255
 436:	19 f0       	breq	.+6      	; 0x43e <__divsf3+0x18>
 438:	bf c0       	rjmp	.+382    	; 0x5b8 <__fp_inf>
 43a:	51 11       	cpse	r21, r1
 43c:	08 c1       	rjmp	.+528    	; 0x64e <__fp_szero>
 43e:	c2 c0       	rjmp	.+388    	; 0x5c4 <__fp_nan>

00000440 <__divsf3x>:
 440:	e3 d0       	rcall	.+454    	; 0x608 <__fp_split3>
 442:	98 f3       	brcs	.-26     	; 0x42a <__divsf3+0x4>

00000444 <__divsf3_pse>:
 444:	99 23       	and	r25, r25
 446:	c9 f3       	breq	.-14     	; 0x43a <__divsf3+0x14>
 448:	55 23       	and	r21, r21
 44a:	b1 f3       	breq	.-20     	; 0x438 <__divsf3+0x12>
 44c:	95 1b       	sub	r25, r21
 44e:	55 0b       	sbc	r21, r21
 450:	bb 27       	eor	r27, r27
 452:	aa 27       	eor	r26, r26
 454:	62 17       	cp	r22, r18
 456:	73 07       	cpc	r23, r19
 458:	84 07       	cpc	r24, r20
 45a:	38 f0       	brcs	.+14     	; 0x46a <__stack+0xb>
 45c:	9f 5f       	subi	r25, 0xFF	; 255
 45e:	5f 4f       	sbci	r21, 0xFF	; 255
 460:	22 0f       	add	r18, r18
 462:	33 1f       	adc	r19, r19
 464:	44 1f       	adc	r20, r20
 466:	aa 1f       	adc	r26, r26
 468:	a9 f3       	breq	.-22     	; 0x454 <__divsf3_pse+0x10>
 46a:	33 d0       	rcall	.+102    	; 0x4d2 <__stack+0x73>
 46c:	0e 2e       	mov	r0, r30
 46e:	3a f0       	brmi	.+14     	; 0x47e <__stack+0x1f>
 470:	e0 e8       	ldi	r30, 0x80	; 128
 472:	30 d0       	rcall	.+96     	; 0x4d4 <__stack+0x75>
 474:	91 50       	subi	r25, 0x01	; 1
 476:	50 40       	sbci	r21, 0x00	; 0
 478:	e6 95       	lsr	r30
 47a:	00 1c       	adc	r0, r0
 47c:	ca f7       	brpl	.-14     	; 0x470 <__stack+0x11>
 47e:	29 d0       	rcall	.+82     	; 0x4d2 <__stack+0x73>
 480:	fe 2f       	mov	r31, r30
 482:	27 d0       	rcall	.+78     	; 0x4d2 <__stack+0x73>
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	88 1f       	adc	r24, r24
 48a:	bb 1f       	adc	r27, r27
 48c:	26 17       	cp	r18, r22
 48e:	37 07       	cpc	r19, r23
 490:	48 07       	cpc	r20, r24
 492:	ab 07       	cpc	r26, r27
 494:	b0 e8       	ldi	r27, 0x80	; 128
 496:	09 f0       	breq	.+2      	; 0x49a <__stack+0x3b>
 498:	bb 0b       	sbc	r27, r27
 49a:	80 2d       	mov	r24, r0
 49c:	bf 01       	movw	r22, r30
 49e:	ff 27       	eor	r31, r31
 4a0:	93 58       	subi	r25, 0x83	; 131
 4a2:	5f 4f       	sbci	r21, 0xFF	; 255
 4a4:	2a f0       	brmi	.+10     	; 0x4b0 <__stack+0x51>
 4a6:	9e 3f       	cpi	r25, 0xFE	; 254
 4a8:	51 05       	cpc	r21, r1
 4aa:	68 f0       	brcs	.+26     	; 0x4c6 <__stack+0x67>
 4ac:	85 c0       	rjmp	.+266    	; 0x5b8 <__fp_inf>
 4ae:	cf c0       	rjmp	.+414    	; 0x64e <__fp_szero>
 4b0:	5f 3f       	cpi	r21, 0xFF	; 255
 4b2:	ec f3       	brlt	.-6      	; 0x4ae <__stack+0x4f>
 4b4:	98 3e       	cpi	r25, 0xE8	; 232
 4b6:	dc f3       	brlt	.-10     	; 0x4ae <__stack+0x4f>
 4b8:	86 95       	lsr	r24
 4ba:	77 95       	ror	r23
 4bc:	67 95       	ror	r22
 4be:	b7 95       	ror	r27
 4c0:	f7 95       	ror	r31
 4c2:	9f 5f       	subi	r25, 0xFF	; 255
 4c4:	c9 f7       	brne	.-14     	; 0x4b8 <__stack+0x59>
 4c6:	88 0f       	add	r24, r24
 4c8:	91 1d       	adc	r25, r1
 4ca:	96 95       	lsr	r25
 4cc:	87 95       	ror	r24
 4ce:	97 f9       	bld	r25, 7
 4d0:	08 95       	ret
 4d2:	e1 e0       	ldi	r30, 0x01	; 1
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	88 1f       	adc	r24, r24
 4da:	bb 1f       	adc	r27, r27
 4dc:	62 17       	cp	r22, r18
 4de:	73 07       	cpc	r23, r19
 4e0:	84 07       	cpc	r24, r20
 4e2:	ba 07       	cpc	r27, r26
 4e4:	20 f0       	brcs	.+8      	; 0x4ee <__stack+0x8f>
 4e6:	62 1b       	sub	r22, r18
 4e8:	73 0b       	sbc	r23, r19
 4ea:	84 0b       	sbc	r24, r20
 4ec:	ba 0b       	sbc	r27, r26
 4ee:	ee 1f       	adc	r30, r30
 4f0:	88 f7       	brcc	.-30     	; 0x4d4 <__stack+0x75>
 4f2:	e0 95       	com	r30
 4f4:	08 95       	ret

000004f6 <__floatunsisf>:
 4f6:	e8 94       	clt
 4f8:	09 c0       	rjmp	.+18     	; 0x50c <__floatsisf+0x12>

000004fa <__floatsisf>:
 4fa:	97 fb       	bst	r25, 7
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__floatsisf+0x12>
 4fe:	90 95       	com	r25
 500:	80 95       	com	r24
 502:	70 95       	com	r23
 504:	61 95       	neg	r22
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	99 23       	and	r25, r25
 50e:	a9 f0       	breq	.+42     	; 0x53a <__floatsisf+0x40>
 510:	f9 2f       	mov	r31, r25
 512:	96 e9       	ldi	r25, 0x96	; 150
 514:	bb 27       	eor	r27, r27
 516:	93 95       	inc	r25
 518:	f6 95       	lsr	r31
 51a:	87 95       	ror	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b7 95       	ror	r27
 522:	f1 11       	cpse	r31, r1
 524:	f8 cf       	rjmp	.-16     	; 0x516 <__floatsisf+0x1c>
 526:	fa f4       	brpl	.+62     	; 0x566 <__floatsisf+0x6c>
 528:	bb 0f       	add	r27, r27
 52a:	11 f4       	brne	.+4      	; 0x530 <__floatsisf+0x36>
 52c:	60 ff       	sbrs	r22, 0
 52e:	1b c0       	rjmp	.+54     	; 0x566 <__floatsisf+0x6c>
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	16 c0       	rjmp	.+44     	; 0x566 <__floatsisf+0x6c>
 53a:	88 23       	and	r24, r24
 53c:	11 f0       	breq	.+4      	; 0x542 <__floatsisf+0x48>
 53e:	96 e9       	ldi	r25, 0x96	; 150
 540:	11 c0       	rjmp	.+34     	; 0x564 <__floatsisf+0x6a>
 542:	77 23       	and	r23, r23
 544:	21 f0       	breq	.+8      	; 0x54e <__floatsisf+0x54>
 546:	9e e8       	ldi	r25, 0x8E	; 142
 548:	87 2f       	mov	r24, r23
 54a:	76 2f       	mov	r23, r22
 54c:	05 c0       	rjmp	.+10     	; 0x558 <__floatsisf+0x5e>
 54e:	66 23       	and	r22, r22
 550:	71 f0       	breq	.+28     	; 0x56e <__floatsisf+0x74>
 552:	96 e8       	ldi	r25, 0x86	; 134
 554:	86 2f       	mov	r24, r22
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	2a f0       	brmi	.+10     	; 0x566 <__floatsisf+0x6c>
 55c:	9a 95       	dec	r25
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	da f7       	brpl	.-10     	; 0x55c <__floatsisf+0x62>
 566:	88 0f       	add	r24, r24
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__fp_cmp>:
 570:	99 0f       	add	r25, r25
 572:	00 08       	sbc	r0, r0
 574:	55 0f       	add	r21, r21
 576:	aa 0b       	sbc	r26, r26
 578:	e0 e8       	ldi	r30, 0x80	; 128
 57a:	fe ef       	ldi	r31, 0xFE	; 254
 57c:	16 16       	cp	r1, r22
 57e:	17 06       	cpc	r1, r23
 580:	e8 07       	cpc	r30, r24
 582:	f9 07       	cpc	r31, r25
 584:	c0 f0       	brcs	.+48     	; 0x5b6 <__fp_cmp+0x46>
 586:	12 16       	cp	r1, r18
 588:	13 06       	cpc	r1, r19
 58a:	e4 07       	cpc	r30, r20
 58c:	f5 07       	cpc	r31, r21
 58e:	98 f0       	brcs	.+38     	; 0x5b6 <__fp_cmp+0x46>
 590:	62 1b       	sub	r22, r18
 592:	73 0b       	sbc	r23, r19
 594:	84 0b       	sbc	r24, r20
 596:	95 0b       	sbc	r25, r21
 598:	39 f4       	brne	.+14     	; 0x5a8 <__fp_cmp+0x38>
 59a:	0a 26       	eor	r0, r26
 59c:	61 f0       	breq	.+24     	; 0x5b6 <__fp_cmp+0x46>
 59e:	23 2b       	or	r18, r19
 5a0:	24 2b       	or	r18, r20
 5a2:	25 2b       	or	r18, r21
 5a4:	21 f4       	brne	.+8      	; 0x5ae <__fp_cmp+0x3e>
 5a6:	08 95       	ret
 5a8:	0a 26       	eor	r0, r26
 5aa:	09 f4       	brne	.+2      	; 0x5ae <__fp_cmp+0x3e>
 5ac:	a1 40       	sbci	r26, 0x01	; 1
 5ae:	a6 95       	lsr	r26
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	81 1d       	adc	r24, r1
 5b4:	81 1d       	adc	r24, r1
 5b6:	08 95       	ret

000005b8 <__fp_inf>:
 5b8:	97 f9       	bld	r25, 7
 5ba:	9f 67       	ori	r25, 0x7F	; 127
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	08 95       	ret

000005c4 <__fp_nan>:
 5c4:	9f ef       	ldi	r25, 0xFF	; 255
 5c6:	80 ec       	ldi	r24, 0xC0	; 192
 5c8:	08 95       	ret

000005ca <__fp_pscA>:
 5ca:	00 24       	eor	r0, r0
 5cc:	0a 94       	dec	r0
 5ce:	16 16       	cp	r1, r22
 5d0:	17 06       	cpc	r1, r23
 5d2:	18 06       	cpc	r1, r24
 5d4:	09 06       	cpc	r0, r25
 5d6:	08 95       	ret

000005d8 <__fp_pscB>:
 5d8:	00 24       	eor	r0, r0
 5da:	0a 94       	dec	r0
 5dc:	12 16       	cp	r1, r18
 5de:	13 06       	cpc	r1, r19
 5e0:	14 06       	cpc	r1, r20
 5e2:	05 06       	cpc	r0, r21
 5e4:	08 95       	ret

000005e6 <__fp_round>:
 5e6:	09 2e       	mov	r0, r25
 5e8:	03 94       	inc	r0
 5ea:	00 0c       	add	r0, r0
 5ec:	11 f4       	brne	.+4      	; 0x5f2 <__fp_round+0xc>
 5ee:	88 23       	and	r24, r24
 5f0:	52 f0       	brmi	.+20     	; 0x606 <__fp_round+0x20>
 5f2:	bb 0f       	add	r27, r27
 5f4:	40 f4       	brcc	.+16     	; 0x606 <__fp_round+0x20>
 5f6:	bf 2b       	or	r27, r31
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__fp_round+0x18>
 5fa:	60 ff       	sbrs	r22, 0
 5fc:	04 c0       	rjmp	.+8      	; 0x606 <__fp_round+0x20>
 5fe:	6f 5f       	subi	r22, 0xFF	; 255
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	08 95       	ret

00000608 <__fp_split3>:
 608:	57 fd       	sbrc	r21, 7
 60a:	90 58       	subi	r25, 0x80	; 128
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	59 f0       	breq	.+22     	; 0x628 <__fp_splitA+0x10>
 612:	5f 3f       	cpi	r21, 0xFF	; 255
 614:	71 f0       	breq	.+28     	; 0x632 <__fp_splitA+0x1a>
 616:	47 95       	ror	r20

00000618 <__fp_splitA>:
 618:	88 0f       	add	r24, r24
 61a:	97 fb       	bst	r25, 7
 61c:	99 1f       	adc	r25, r25
 61e:	61 f0       	breq	.+24     	; 0x638 <__fp_splitA+0x20>
 620:	9f 3f       	cpi	r25, 0xFF	; 255
 622:	79 f0       	breq	.+30     	; 0x642 <__fp_splitA+0x2a>
 624:	87 95       	ror	r24
 626:	08 95       	ret
 628:	12 16       	cp	r1, r18
 62a:	13 06       	cpc	r1, r19
 62c:	14 06       	cpc	r1, r20
 62e:	55 1f       	adc	r21, r21
 630:	f2 cf       	rjmp	.-28     	; 0x616 <__fp_split3+0xe>
 632:	46 95       	lsr	r20
 634:	f1 df       	rcall	.-30     	; 0x618 <__fp_splitA>
 636:	08 c0       	rjmp	.+16     	; 0x648 <__fp_splitA+0x30>
 638:	16 16       	cp	r1, r22
 63a:	17 06       	cpc	r1, r23
 63c:	18 06       	cpc	r1, r24
 63e:	99 1f       	adc	r25, r25
 640:	f1 cf       	rjmp	.-30     	; 0x624 <__fp_splitA+0xc>
 642:	86 95       	lsr	r24
 644:	71 05       	cpc	r23, r1
 646:	61 05       	cpc	r22, r1
 648:	08 94       	sec
 64a:	08 95       	ret

0000064c <__fp_zero>:
 64c:	e8 94       	clt

0000064e <__fp_szero>:
 64e:	bb 27       	eor	r27, r27
 650:	66 27       	eor	r22, r22
 652:	77 27       	eor	r23, r23
 654:	cb 01       	movw	r24, r22
 656:	97 f9       	bld	r25, 7
 658:	08 95       	ret

0000065a <__gesf2>:
 65a:	8a df       	rcall	.-236    	; 0x570 <__fp_cmp>
 65c:	08 f4       	brcc	.+2      	; 0x660 <__gesf2+0x6>
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	08 95       	ret

00000662 <_exit>:
 662:	f8 94       	cli

00000664 <__stop_program>:
 664:	ff cf       	rjmp	.-2      	; 0x664 <__stop_program>
